datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String? // twitch accounts do not necessarily have emails
  displayName String?
  profileImageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  twitchIntegration TwitchIntegration?
  twitchAccessToken TwitchAccessToken?
}

model TwitchIntegration {
  id String @id // twitch ID
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  twitchLogin String // what Twitch Profile their username
  twitchChannelName String
  twitchChannelId String @unique

  twitchMessages TwitchMessage[] 
}

model TwitchAccessToken {
  userId String @id @unique 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  accessToken String // The access token which is necessary for every request to the Twitch API.
  expiresIn Int? // The time, in seconds from the obtainment date, when the access token expires.
  obtainmentTimestamp BigInt? // The date when the token was obtained, in epoch milliseconds.
  refreshToken String? // The refresh token which is necessary to refresh the access token once it expires.
}

model TwitchMessage {
  id String @id // twitch message id
  sentAt DateTime
  content String // content in actual twitch message
  senderTwitchUsername String // the username of the twitch member who sent the message
  isFlagged Boolean @default(false) // did we flag and deleted this msg?
  moderation Json // openai moderation result

  twitchIntegrationId String
  twitchIntegration TwitchIntegration @relation(fields: [twitchIntegrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}