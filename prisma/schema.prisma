datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  displayName String?
  profileImageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  twitchIntegration TwitchIntegration?
  twitchAccessToken TwitchAccessToken?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model TwitchIntegration {
  id String @id // twitch ID
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  twitchLogin String // what Twitch Profile their username
}

model TwitchAccessToken {
  userId String @id @unique 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  accessToken String // The access token which is necessary for every request to the Twitch API.
  expiresIn Int? // The time, in seconds from the obtainment date, when the access token expires.
  obtainmentTimestamp BigInt? // The date when the token was obtained, in epoch milliseconds.
  refreshToken String? // The refresh token which is necessary to refresh the access token once it expires.
}